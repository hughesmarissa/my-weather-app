{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","key","fetch","then","res","json","result","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uLAEMA,EACG,mCADHA,EAEI,2CAiEKC,MA9Df,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACJC,EADI,KACGC,EADH,OAEmBF,mBAAS,IAF5B,mBAEJG,EAFI,KAEKC,EAFL,KA6Bb,OAEE,aADE,CACF,OAAKC,UAAmC,oBAAhBF,EAAQG,MAAyBH,EAAQG,KAAKC,KAAO,GAAM,WAAsB,MAAzG,SACI,iCACI,qBAAKF,UAAU,aAAf,SACI,uBACIG,KAAK,OACLH,UAAU,aACVI,YAAY,YACZC,SAAU,SAAAC,GAAC,OAAIT,EAASS,EAAEC,OAAOC,QACjCA,MAAOZ,EACPa,WAnCD,SAACH,GACE,UAAVA,EAAEI,KACFC,MAAM,GAAD,OAAIlB,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACzDmB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACFhB,EAAWgB,GACXlB,EAAS,IACTmB,QAAQC,IAAIF,WA+BS,oBAAhBjB,EAAQG,KACjB,gCACI,sBAAKD,UAAU,eAAf,UACI,sBAAKA,UAAU,WAAf,UAA2BF,EAAQoB,KAAnC,KAA2CpB,EAAQqB,IAAIC,WACvD,qBAAKpB,UAAU,OAAf,SA9BI,SAACqB,GACjB,IAGIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EALS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAKzGL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAqBCE,CAAY,IAAIC,WAE3C,sBAAK/B,UAAU,cAAf,UACI,sBAAKA,UAAU,OAAf,UACKgC,KAAKC,MAAMnC,EAAQG,KAAKC,MAD7B,WAGA,qBAAKF,UAAU,UAAf,SAA0BF,EAAQA,QAAQ,GAAGG,aAGhD,SCnDFiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.9789f388.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst api = {\n    key: \"786c2d4a2cfe60ab1f9d80f9245a999d\",\n    base: \"https://api.openweathermap.org/data/2.5/\"\n};\n\nfunction App() {\n    const [query, setQuery] = useState('');\n    const [weather, setWeather] = useState({});\n    \n    //function to get weather\n    const search = (e) => {\n        if (e.key === 'Enter') {\n            fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n            .then(res => res.json())\n            .then(result => {\n                setWeather(result);\n                setQuery('');\n                console.log(result);\n            });\n        }\n    }\n\n    const dateBuilder = (d) => {\n        let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n        let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    \n        let day = days[d.getDay()];\n        let date = d.getDate();\n        let month = months[d.getMonth()];\n        let year = d.getFullYear();\n    \n        return `${day} ${date} ${month} ${year}`\n      } \n\n  return (\n      //check for under/over 16° for background change\n    <div className={(typeof weather.main != \"undefined\") ? ((weather.main.temp > 16) ? 'app warm' : 'app') : 'app'}>\n        <main>\n            <div className=\"search-box\">\n                <input \n                    type=\"text\"\n                    className=\"search-bar\"\n                    placeholder=\"Search...\"\n                    onChange={e => setQuery(e.target.value)}\n                    value={query}\n                    onKeyPress={search}\n                />\n            </div>\n            {(typeof weather.main != \"undefined\") ? ( //clears page until search\n            <div>\n                <div className=\"location-box\">\n                    <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n                    <div className=\"date\">{dateBuilder(new Date())}</div>\n                </div>\n                <div className=\"weather-box\">\n                    <div className=\"temp\">\n                        {Math.round(weather.main.temp)}°c\n                    </div>\n                    <div className=\"weather\">{weather.weather[0].main}</div>\n                </div>\n            </div>\n            ) : ('')}\n        </main>\n    </div>\n  );\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}